from dedalus.mods import *
import numpy as na
import sys
import pylab as pl

if len(sys.argv) != 3:
    print "usage: ", sys.argv[0], " <ic data file> <normalization data file>"
    print """sample ic and normalization data are included in files
ic_input.txt (generated by linger++, linger-mode output with parameters in ic_param.inp)
norm_input.txt (generated by linger++, transfer-mode output)
"""
    sys.exit()

icfname = sys.argv[1]
normfname = sys.argv[2]

shape = (32,32,32)
L = (1000,)*3
RHS = BaryonCDMCosmology(shape, FourierRepresentation, length=L)
data = RHS.create_fields(0.)
H0 = 7.185e-5 # 70.3 km/s/Mpc in Myr^-1
a_i = 0.00778851#0.011681 # initial scale factor
t0 = (2./3.)/H0 # present age of E-dS universe (although we're using LCDM)
t_ini = (a_i**(3./2.)) * t0 # time at which a = a_i in E-dS

def pow_spec(data, it, flist=['delta_c', 'delta_b']):
    sampledata = data.fields.values()[0][0]
    kmag = na.sqrt(sampledata.k2())
    k = sampledata.k['x'].flatten()
    k = na.abs(k[0:(k.size / 2 + 1)])
    kbottom = k - k[1] / 2.
    ktop = k + k[1] / 2.
    spec = {}
    for f in flist:
        spec[f] = na.zeros_like(k)
        power = na.zeros(sampledata['kspace'].shape)
        for i in xrange(data[f].ncomp):
            power += na.abs(data[f][i]['kspace'])**2
        for i in xrange(k.size):
            k_rad = (kbottom[i] + ktop[i])/2
            kshell = (kmag >= kbottom[i]) & (kmag < ktop[i])
            nk = ((kshell & (power>0)) * na.ones_like(kmag)).sum()
            spec[f][i] = (power[kshell]).sum()/nk
    return k, spec

def rel_matter_spec(data, it, Dplus, a, flist=['delta_c', 'delta_b']):
    k, spec = pow_spec(data, it, flist=flist)
    
    spec_c = spec['delta_c']/(Dplus*Dplus)
    spec_b = spec['delta_b']/(Dplus*Dplus)

    f = open('frames/data_a%05f.txt' % a, 'w')
    for ak, c, b in zip(k, spec_c, spec_b):
        f.write('%08e\t%08e\t%08e\n' % (ak, c, b))
    f.close()

    outfile = "bcdm/powspec_a%05f.png" % a
    fig = pl.figure()
    pl.loglog(k[1:], spec_c[1:], 'o-', label = 'CDM')
    pl.loglog(k[1:], spec_b[1:], 'o-', label = 'baryons', hold=True)
    pl.xlabel("$k$")
    pl.ylabel("$\mid \delta_k \mid^2 / D_+^2$")
    pl.legend()
    pl.title("Baryon vs. CDM power spectrum at a=%05f" % a)
    fig.savefig(outfile)
    fig = pl.figure()
    pl.loglog(k[1:], spec_b[1:]/spec_c[1:], 'o-')
    pl.xlabel("$k$")
    pl.ylabel("$\mid\delta_b\mid^2 / \mid\delta_c\mid^2$")
    pl.title("Ratio of baryon to CDM power at a=%05f" % a)
    fig.savefig("bcdm/ratio_a%05f.png" % a)

def iso_vel_spec(data, it, Dplus, a, flist=['u_c','u_b']):
    k, spec = pow_spec(data, it, flist=flist)
    spec_uc = spec['u_c']
    spec_ub = spec['u_b']

    f = open('frames/udata_a%05f.txt' % a, 'w')
    for ak, c, b in zip(k, spec_uc, spec_ub):
        f.write('%08e\t%08e\t%08e\n' % (ak, c, b))
    f.close()


    outfile = "bcdm/reluspec_a%05f.png" % a
    fig = pl.figure()
    pl.loglog(k[1:], abs(spec_uc[1:] - spec_ub[1:]), 'o-')
    pl.xlabel("$k$")
    pl.ylabel("$u^2_{rel}$")
    pl.title("Baryon and CDM relative velocities at a=%05f" % a)
    fig.savefig(outfile)

def read_cs2(thermo_fname):
    """read baryon sound speed squared from linger++ thermal history output

    """
    c = 0.3063015366 # speed of light in Mpc/Myr

    cs2 = []
    a = []
    for line in open(thermo_fname):
        values = line.split()
        a.append(float(values[1]))
        cs2.append(float(values[4])*c*c)
        
    return a, cs2

RHS.parameters['Omega_r'] = 8.4e-5
RHS.parameters['Omega_m'] = 0.276
RHS.parameters['Omega_b'] = 0.045
RHS.parameters['Omega_c'] = RHS.parameters['Omega_m'] - RHS.parameters['Omega_b']
RHS.parameters['Omega_l'] = 0.724
RHS.parameters['H0'] = H0
a, cs2 = read_cs2('thermal_history.txt') # linger++ thermal history output
RHS.init_cs2(a, cs2)

spec_delta_c, spec_u_c, spec_delta_b, spec_u_b = cosmo_spectra(data, icfname, normfname, baryons=True)
cosmo_fields(data['delta_c'], data['u_c'], data['delta_b'], data['u_b'], spec_delta_c, spec_u_c, spec_delta_b, spec_u_b)

dt = 10. # time in Myr
ti = RK4simplevisc(RHS)
ti.stop_time(10.*dt)
ti.set_nsnap(100)
ti.set_dtsnap(10000)

an = AnalysisSet(data, ti)
an.add("field_snap", 1)
#an.add("en_spec", 100, {'flist':['u_c','u_b']})
i=0
an.run()
outfile = open('ugrowth.dat', 'w')
while ti.ok:
    Dplus = ((data.time + t_ini)/t_ini) ** (2./3.)
    print 'step: ', i, ' a = ', RHS.aux_eqns['a'].value
    if i % 1 == 0:
        rel_matter_spec(data, i, Dplus, RHS.aux_eqns['a'].value)
        iso_vel_spec(data, i, Dplus, RHS.aux_eqns['a'].value)
    ti.advance(data, dt)
    i = i + 1
    an.run()
    dc = data['u_c'][0]['kspace'][1,1,1].real
    db = data['u_b'][0]['kspace'][1,1,1].real
    outfile.write("%10.5e\t%10.5e\t%10.5e\t%10.5e\t%10.5e\n" %(ti.time, ti.RHS.aux_eqns['a'].value, dc, db, dc-db))
outfile.close()

rel_matter_spec(data, i, Dplus, RHS.aux_eqns['a'].value)
iso_vel_spec(data, i, Dplus, RHS.aux_eqns['a'].value)
